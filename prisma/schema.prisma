// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String     @unique
  password  String
  crags     Crag[]
  comments  Comment[]
  photos    Photo[]
  cragRoles CragRole[]
}

model Crag {
  id        Int        @id @default(autoincrement())
  name      String
  content   String
  tags      String
  author    User?      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int?
  comments  Comment[]
  photos    Photo[]
  cragRoles CragRole[]
}

enum Role {
  OBSERVER
  MODERATOR
  OWNER
}

model CragRole {
  id     Int   @id @default(autoincrement())
  role   Role  @default(OBSERVER)
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  crag   Crag? @relation(fields: [cragId], references: [id], onDelete: Cascade)
  cragId Int?
}

model Comment {
  id       Int       @id @default(autoincrement())
  content  String
  author   User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?
  crag     Crag?     @relation(fields: [cragId], references: [id], onDelete: Cascade)
  cragId   Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId Int?
  replies  Comment[] @relation("CommentReplies")
}

model Photo {
  id       Int    @id @default(autoincrement())
  name     String
  path     String
  size     Int
  crag     Crag?  @relation(fields: [cragId], references: [id], onDelete: Cascade)
  cragId   Int?
  author   User?  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?
}
